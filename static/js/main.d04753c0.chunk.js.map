{"version":3,"sources":["components/ComicList/Comic/ComicDetails/ComicDetails.js","components/EmailForm/EmailForm.js","components/UI/Backdrop/backdrop.js","components/UI/Modal/Modal.js","components/UI/Paginator/Paginator.js","components/UI/Loading/loading.js","components/ComicList/Comic/Comic.js","components/ComicList/ComicList.js","assets/images/ironman.jpg","containers/ComicsListPage/ComicsListPage.js","constants/constants.js","App.js","reportWebVitals.js","index.js"],"names":["ComicDetails","comic","className","title","src","thumbnail","path","extension","width","height","alt","description","EmailForm","sendEmail","useState","emailValue","setEmailValue","onChange","event","target","value","onClick","backdrop","props","show","clicked","Modal","children","modalClosed","style","transform","opacity","React","memo","prevProps","nextProps","Paginator","currentEntry","totalEntries","numberPerPage","changePage","console","log","disabled","spinner","Comic","comicClicked","comicSelected","type","comicList","loading","comicsDivs","map","element","id","ComicsListPage","searchValue","setSearchValue","setComicList","comicsSelectedList","setComicsSelectedList","comicModal","isComicModal","emailModal","isEmailModal","selectedComic","setSelectedComic","isLoading","paginas","setPaginas","executeSearch","offset","axios","get","then","response","comicsArray","data","results","forEach","push","creators","items","current","total","catch","toEmail","length","templateParams","to_email","message","reduce","htmlString","currentValue","concat","emailjs","send","status","text","err","backgroundImage","Background","backgroundSize","prevList","newList","posItem","findIndex","splice","stopPropagation","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d04753c0.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport './ComicDetails.css';\r\n\r\nconst ComicDetails = ({ comic }) => {\r\n    \r\n    return (\r\n        <div className=\"ComicDetails\">\r\n            <h1 className=\"ComicDetails_title\">{comic.title}</h1>\r\n            <div className=\"ComicDetails_details\">\r\n                <img \r\n                    src={`${comic.thumbnail.path}/portrait_xlarge.${comic.thumbnail.extension}`}\r\n                    width=\"150\"\r\n                    height=\"225\"\r\n                    alt=\"Not found\"\r\n                />\r\n                <p>{comic.description}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nComicDetails.propTypes = {\r\n    comic: PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        description: PropTypes.string,\r\n        thumbnail: PropTypes.shape({\r\n            path: PropTypes.string.isRequired,\r\n            extension: PropTypes.string.isRequired\r\n        }).isRequired\r\n    }).isRequired,\r\n};\r\n\r\nexport default ComicDetails;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './EmailForm.css';\r\n\r\nconst EmailForm = ({ sendEmail }) => {\r\n    const [ emailValue, setEmailValue ] = useState(\"\");\r\n\r\n    return (\r\n        <div className=\"EmailForm\">\r\n            <p>Digite o seu email:</p>\r\n            <input className=\"EmailForm_input\" onChange={event => setEmailValue(event.target.value)}/>\r\n            <button className=\"Main_button\" onClick={() => sendEmail(emailValue)}>Enviar</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nEmailForm.propTypes = {\r\n    sendEmail: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default EmailForm;","import './backdrop.css';\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\n\r\nimport Backdrop from '../Backdrop/backdrop';\r\n\r\nimport './Modal.css';\r\n\r\nconst Modal = ({ show, children, modalClosed }) => {\r\n\r\n    return (\r\n        <>\r\n            <Backdrop show={show} clicked={modalClosed} />\r\n            <div \r\n                className=\"Modal\"\r\n                style={{\r\n                    transform: show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                    opacity: show ? '1' : '0'\r\n                }}>\r\n                {children}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}  \r\n\r\nexport default React.memo(Modal, (prevProps, nextProps) => nextProps.show === prevProps.show && nextProps.children === prevProps.children);","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport './Paginator.css';\r\n\r\nconst Paginator = ({ currentEntry, totalEntries, numberPerPage, changePage }) => {\r\n    console.log(\"Pagintor rendered\");\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className=\"Paginator_button\"\r\n                onClick={() => changePage(currentEntry - numberPerPage)}\r\n                disabled={currentEntry === 0}>\r\n                Anterior\r\n            </button>\r\n            <span className=\"Paginator_text\">{`Mostrando ${currentEntry}-${currentEntry + numberPerPage} de ${totalEntries}`}</span>\r\n            <button\r\n                className=\"Paginator_button\"\r\n                onClick={() => changePage(currentEntry + numberPerPage)}>\r\n                Próxima\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nPaginator.propTypes = {\r\n    currentEntry: PropTypes.number.isRequired,\r\n    totalEntries: PropTypes.number.isRequired,\r\n    numberPerPage: PropTypes.number.isRequired,\r\n    changePage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default React.memo(Paginator, (prevProps, nextProps) => nextProps.currentEntry === prevProps.currentEntry && prevProps.totalEntries === nextProps.totalEntries);","import React from 'react';\r\n\r\nimport './loading.css';\r\n\r\nconst spinner = () => (\r\n    <div className=\"Loader\">Loading...</div>\r\n);\r\n\r\nexport default spinner;","import PropTypes from 'prop-types';\r\n\r\nimport './Comic.css';\r\n\r\nconst Comic = ({ comic, comicClicked, comicSelected }) => {\r\n    return (\r\n        <div className=\"Comic\" onClick={() => comicClicked(comic)}>\r\n            <img \r\n                src={`${comic.thumbnail.path}/portrait_xlarge.${comic.thumbnail.extension}`}\r\n                width=\"150\"\r\n                height=\"225\"\r\n                alt=\"Not found\"\r\n            />\r\n            <h3>{comic.title}</h3>\r\n            <div className=\"Comic_select_email\">\r\n                <input type=\"checkbox\" onClick={event => comicSelected(event, comic)}/>\r\n                <p>Selecionar para envio via email</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nComic.propTypes = {\r\n    comic: PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        thumbnail: PropTypes.shape({\r\n            path: PropTypes.string.isRequired,\r\n            extension: PropTypes.string.isRequired\r\n        }).isRequired\r\n    }).isRequired,\r\n    comicClicked: PropTypes.func.isRequired,\r\n    comicSelected: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Comic;","import PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nimport Loading from '../UI/Loading/loading';\r\nimport Comic from './Comic/Comic';\r\n\r\nimport './ComicList.css';\r\n\r\nconst comicList = ({ comicList, comicClicked, comicSelected, loading }) => {\r\n\r\n    const comicsDivs = (\r\n        comicList.map(element => \r\n            <Comic\r\n                key={element.id}\r\n                comic={element}\r\n                comicClicked={comicClicked}\r\n                comicSelected={comicSelected}\r\n            />\r\n        )\r\n    );\r\n\r\n    return (\r\n        <div className=\"ComicList\">\r\n            {loading ? <Loading /> : comicsDivs}\r\n        </div>\r\n    );\r\n};\r\n\r\ncomicList.propTypes = {\r\n    comicList: PropTypes.arrayOf(PropTypes.shape({\r\n        id: PropTypes.number.isRequired,\r\n    })).isRequired,\r\n    comicClicked: PropTypes.func.isRequired,\r\n    comicSelected: PropTypes.func.isRequired,\r\n    loading: PropTypes.bool.isRequired\r\n};\r\n\r\nexport default React.memo(comicList, (prevProps, nextProps) => nextProps.comicList === prevProps.comicList && prevProps.loading === nextProps.loading);","export default __webpack_public_path__ + \"static/media/ironman.b1708865.jpg\";","import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\n\r\nimport ComicDetails from '../../components/ComicList/Comic/ComicDetails/ComicDetails';\r\nimport EmailForm from '../../components/EmailForm/EmailForm';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport Paginator from '../../components/UI/Paginator/Paginator';\r\nimport ComicList from '../../components/ComicList/ComicList';\r\nimport { MARVEL_URL, MARVEL_API_KEY, NUMBER_COMICS_PER_REQUISITION, EMAIL_TEMPLATE_NAME, EMAIL_USER_NAME, EMAIL_SERVICE_NAME } from \"../../constants/constants\";\r\nimport Background from \"../../assets/images/ironman.jpg\";\r\nimport './ComicsListPage.css';\r\n\r\nconst ComicsListPage = () => {\r\n    const [ searchValue, setSearchValue ] = useState(\"\");\r\n    const [ comicList, setComicList ] = useState([]);\r\n    const [ comicsSelectedList, setComicsSelectedList ] = useState(null);\r\n    const [ comicModal, isComicModal ] = useState(false);\r\n    const [ emailModal, isEmailModal ] = useState(false);\r\n    const [ selectedComic, setSelectedComic ] = useState(null);\r\n    const [ loading, isLoading ] = useState(false);\r\n    const [ paginas, setPaginas ] = useState(null); \r\n\r\n    const executeSearch = offset => {\r\n        isLoading(true);\r\n        axios.get(`${MARVEL_URL}?apikey=${MARVEL_API_KEY}&orderBy=-focDate&title=${searchValue}&offset=${offset}`).then(response => {\r\n            const comicsArray = [];\r\n\r\n            response.data.data.results.forEach(element => {\r\n                comicsArray.push({\r\n                    id: element.id,\r\n                    title: element.title,\r\n                    description: element.description,\r\n                    thumbnail: element.thumbnail,\r\n                    creators: element.creators.items,\r\n                })    \r\n            });\r\n\r\n            setComicList(comicsArray);\r\n            setPaginas({\r\n                current: offset,\r\n                total: response.data.data.total,\r\n            });\r\n            setComicsSelectedList(null);\r\n            isLoading(false);\r\n        }).catch(() => {\r\n            isLoading(false);\r\n        });\r\n    };\r\n\r\n    const onComicClicked = comic => {\r\n        isComicModal(currentValue => !currentValue);\r\n        setSelectedComic(comic);\r\n    };\r\n\r\n    const onComicSelected = (event, comic) => {\r\n\r\n        setComicsSelectedList(prevList => {\r\n            const newList = prevList === null ? [] : [...prevList];\r\n\r\n            const posItem = newList.findIndex(element => (element.id === comic.id));\r\n\r\n            if (posItem === -1) {\r\n                newList.push(comic);\r\n            } else {\r\n                newList.splice(posItem, 1);\r\n            }\r\n            console.log(newList);\r\n            return newList;\r\n        });\r\n        \r\n        event.stopPropagation();\r\n    };\r\n\r\n    const sendEmail = toEmail => {\r\n        \r\n        isEmailModal(false);\r\n        console.log(comicsSelectedList);\r\n        if (comicsSelectedList.length > 0) {\r\n            const emailString = \r\n                comicsSelectedList.map(element => (`<h1>${element.title}</h1><img src=${element.thumbnail.path}/portrait_xlarge.${element.thumbnail.extension} /><p>${element.description}</p><hr>`))\r\n                    .reduce((htmlString, currentValue) => htmlString.concat(currentValue), \"\");\r\n\r\n            const templateParams = {\r\n                to_email: toEmail,\r\n                message: emailString\r\n            };\r\n\r\n            emailjs.send(EMAIL_SERVICE_NAME, EMAIL_TEMPLATE_NAME, templateParams, EMAIL_USER_NAME).then((response) => {\r\n                console.log('SUCCESS!', response.status, response.text);\r\n            }, (err) => {\r\n                console.log('FAILED...', err);\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {comicModal ? (\r\n            <Modal \r\n                show={comicModal}\r\n                modalClosed={() => isComicModal(false)}>\r\n                <ComicDetails\r\n                    comic={selectedComic}\r\n                />\r\n            </Modal>) : null}\r\n            {emailModal ? (\r\n            <Modal \r\n                show={emailModal}\r\n                modalClosed={() => isEmailModal(false)}>\r\n                <EmailForm \r\n                    sendEmail={sendEmail}\r\n                />\r\n            </Modal>) : null}\r\n            <div className=\"Main\" style={{backgroundImage: `url(${Background})`, backgroundSize: \"cover\"}}>\r\n                <div>\r\n                    <input className=\"Main_input\" onChange={event => setSearchValue(event.target.value)}/>\r\n                    <button className=\"Main_button\" onClick={() => executeSearch(0)}> Pesquisar </button>\r\n                </div>\r\n                <ComicList\r\n                    comicList={comicList}\r\n                    comicClicked={onComicClicked}\r\n                    comicSelected={onComicSelected}\r\n                    loading={loading}\r\n                />\r\n                {paginas ?\r\n                    <Paginator\r\n                        currentEntry={paginas.current}\r\n                        totalEntries={paginas.total}\r\n                        numberPerPage={NUMBER_COMICS_PER_REQUISITION}\r\n                        changePage={executeSearch}\r\n                    />\r\n                    : null\r\n                }\r\n                {comicList.length > 0 ? (\r\n                    <button\r\n                        className=\"Main_button Main_button_white\"\r\n                        onClick={() => isEmailModal(true)} disabled={comicsSelectedList === null || comicsSelectedList.length === 0}\r\n                        >\r\n                            Enviar por email\r\n                    </button>\r\n                    )\r\n                    : null\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ComicsListPage;","export const MARVEL_URL = \"https://gateway.marvel.com:443/v1/public/comics\";\r\n\r\nexport const MARVEL_API_KEY = \"a604e1ad53cdd5a80cb69338cdfc660c\";\r\nexport const NUMBER_COMICS_PER_REQUISITION = 20;\r\n\r\nexport const EMAIL_TEMPLATE_NAME = \"template_7zsk2xn\";\r\nexport const EMAIL_USER_NAME = \"user_AbACusNO1Id1cs9blhC9q\";\r\nexport const EMAIL_SERVICE_NAME = \"service_nolf1fu\";","import './App.css';\r\nimport ComicsListPage from './containers/ComicsListPage/ComicsListPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ComicsListPage />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}